// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Replace with your MySQL database connection URL
}


model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  firstName String
  lastName  String
  birthDate DateTime
  gender    String
  city      String
  address   String? // Optional field
  email     String   @unique
  role      String
  tickets   Ticket[] // Relationship with tickets (Fan can reserve tickets)
}

model Match {
  id           Int      @id @default(autoincrement())
  homeTeamId   Int
  homeTeam     Team     @relation("HomeMatches", fields: [homeTeamId], references: [id])
  awayTeamId   Int
  awayTeam     Team     @relation("AwayMatches", fields: [awayTeamId], references: [id])
  matchVenueId Int
  matchVenue   Stadium  @relation(fields: [matchVenueId], references: [id])
  dateTime     DateTime
  mainReferee  String
  linesmen1    String
  linesmen2    String
  vacantSeats  Int
  tickets      Ticket[]
}

model Seat {
  id        Int      @id @default(autoincrement())
  seatNo    Int
  ticket    Ticket[]
  stadiumId Int
  stadium   Stadium  @relation(fields: [stadiumId], references: [id])
}

model Team {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  homeMatches Match[] @relation("HomeMatches") // Matches where the team is the home team
  awayMatches Match[] @relation("AwayMatches") // Matches where the team is the away team
}

model Stadium {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  matches Match[] // Relationship with matches
  seats   Seat[]
}

model Ticket {
  id      Int   @id @default(autoincrement())
  matchId Int
  match   Match @relation(fields: [matchId], references: [id])
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  seatId  Int
  seat    Seat? @relation(fields: [seatId], references: [id])
}
